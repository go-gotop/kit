// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-gotop/kit/limiter (interfaces: Limiter)
//
// Generated by this command:
//
//	mockgen -destination=../limiter/mocks/limiter.go -package=mklimiter . Limiter
//

// Package mklimiter is a generated GoMock package.
package mklimiter

import (
	reflect "reflect"

	limiter "github.com/go-gotop/kit/limiter"
	gomock "go.uber.org/mock/gomock"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// FutureAllow mocks base method.
func (m *MockLimiter) FutureAllow(arg0 *limiter.LimiterReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FutureAllow", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FutureAllow indicates an expected call of FutureAllow.
func (mr *MockLimiterMockRecorder) FutureAllow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FutureAllow", reflect.TypeOf((*MockLimiter)(nil).FutureAllow), arg0)
}

// MarginAllow mocks base method.
func (m *MockLimiter) MarginAllow(arg0 *limiter.LimiterReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarginAllow", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MarginAllow indicates an expected call of MarginAllow.
func (mr *MockLimiterMockRecorder) MarginAllow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginAllow", reflect.TypeOf((*MockLimiter)(nil).MarginAllow), arg0)
}

// SpotAllow mocks base method.
func (m *MockLimiter) SpotAllow(arg0 *limiter.LimiterReq) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpotAllow", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SpotAllow indicates an expected call of SpotAllow.
func (mr *MockLimiterMockRecorder) SpotAllow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpotAllow", reflect.TypeOf((*MockLimiter)(nil).SpotAllow), arg0)
}

// WsAllow mocks base method.
func (m *MockLimiter) WsAllow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WsAllow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WsAllow indicates an expected call of WsAllow.
func (mr *MockLimiterMockRecorder) WsAllow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WsAllow", reflect.TypeOf((*MockLimiter)(nil).WsAllow))
}
