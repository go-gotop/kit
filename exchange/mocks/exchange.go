// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-gotop/kit/exchange (interfaces: Exchange)
//
// Generated by this command:
//
//	mockgen -destination=../exchange/mocks/exchange.go -package=mkexchange . Exchange
//

// Package mkexchange is a generated GoMock package.
package mkexchange

import (
	context "context"
	reflect "reflect"

	exchange "github.com/go-gotop/kit/exchange"
	gomock "go.uber.org/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// Assets mocks base method.
func (m *MockExchange) Assets(arg0 context.Context, arg1 *exchange.GetAssetsRequest) ([]exchange.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assets", arg0, arg1)
	ret0, _ := ret[0].([]exchange.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assets indicates an expected call of Assets.
func (mr *MockExchangeMockRecorder) Assets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assets", reflect.TypeOf((*MockExchange)(nil).Assets), arg0, arg1)
}

// CancelOrder mocks base method.
func (m *MockExchange) CancelOrder(arg0 context.Context, arg1 *exchange.CancelOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockExchangeMockRecorder) CancelOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockExchange)(nil).CancelOrder), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockExchange) CreateOrder(arg0 context.Context, arg1 *exchange.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockExchangeMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockExchange)(nil).CreateOrder), arg0, arg1)
}

// Name mocks base method.
func (m *MockExchange) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExchangeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExchange)(nil).Name))
}

// SearchOrder mocks base method.
func (m *MockExchange) SearchOrder(arg0 context.Context, arg1 *exchange.SearchOrderRequest) (*exchange.SearchOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrder", arg0, arg1)
	ret0, _ := ret[0].(*exchange.SearchOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrder indicates an expected call of SearchOrder.
func (mr *MockExchangeMockRecorder) SearchOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrder", reflect.TypeOf((*MockExchange)(nil).SearchOrder), arg0, arg1)
}

// SearchTrades mocks base method.
func (m *MockExchange) SearchTrades(arg0 context.Context, arg1 *exchange.SearchTradesRequest) ([]*exchange.SearchTradesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTrades", arg0, arg1)
	ret0, _ := ret[0].([]*exchange.SearchTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTrades indicates an expected call of SearchTrades.
func (mr *MockExchangeMockRecorder) SearchTrades(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTrades", reflect.TypeOf((*MockExchange)(nil).SearchTrades), arg0, arg1)
}
